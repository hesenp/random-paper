
R version 3.0.2 (2013-09-25) -- "Frisbee Sailing"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> 
> ## this program will make use of the functions specified in util.r and
> ## rand-gen.r and generate the simulation comparison.
> 
> source("rand-gen.r")
> source("util.r")
> 
> library(lattice)

Attaching package: ‘lattice’

The following object is masked from ‘package:boot’:

    melanoma

> library(doMC)
Loading required package: foreach
Loading required package: iterators
Loading required package: parallel
> registerDoMC(cores=16)
> 
> scramble_rows <- function(data){
+   ## this function will randomly permute the rows of the input data.
+   ## the result is used to be balanced in simulation.
+   return(data[sample(1:nrow(data)),])
+ }
> 
> gen_association <- function(select){
+   ## this function will select between three methods for the
+   ## simulation.
+   p <- pmatch(select,c("lin_sim","var_sim","cube_sim"))
+   return(switch(p,
+                 lin_sim,var_sim,cube_sim))
+ }
> 
> ## let's first see how things behave with linear models. we are gonna
> ## look at the power for linear models.
> 
> R <- 1000
> 
> scenarios <- scramble_rows(expand.grid(association = c("lin","var","cube"),
+                                        method = c("mutual_information",
+                                          "mira_score",
+                                          "mean_distance",
+                                          "brownian_covariate"),
+                                        n = seq(40,1000,by=20)))
> 
> out <- foreach(i= 1:nrow(scenarios),
+                .combine = rbind) %dopar% {
+   replicate(R, {
+     temp <- gen_association(scenarios[i,1])(scenarios[i,3], 5)
+     return(compare_test(temp$x,temp$y,type = scenarios[i,2]))
+   })
+ }
> 
> save(out,scenarios,
+      file="output/sim-p-value.RData")
> 
> 
> proc.time()
      user     system    elapsed 
652906.966   2359.369  64722.061 
